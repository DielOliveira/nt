continue
parametro
continue
contact_params
continue
parametro["name"]
parametro
continue
parametro
continue
contact_params
continue
contact["email"]
contact
contact.email
contactl.email
contact
continue
body
byebug
email
name
continue
mail(
mail
continue
exit
continue
exit
continue
exit
continue
cadastroAtualizar
continue
reentradas
cadastroAtualizar
cadastro
exit
obrigacaos
continue
params["final"].to_i
params["inicio"].to_i
continue
reentradas
continue
params[:flagopcional]
continue
query
continue
params["linha"].to_s
query
continue
params["ciclo_id"].to_s
query
continue
query
continue
params["nomepessoa"].downcase
params["nomepessoa"]
continue
params['created_at(3i)']
params
params['created_at']
continue
params['ciclo_id']
params
continue
params
continue
params
continue
params
continue
params["created_at"]
params["nomepessoa"]
params["ciclo_id"]
params["ciclo_asdfasid"]
params["ciclo_id"]
params.first['ciclo_id']
params.first[:ciclo_id]
params
params.first
params['1']
params.each do |t|
params.each[1]
params.each.[1]
params.each.second
params.each.first
params.each.1
params.map.1
params.map.2
params[2]
params[1]
params['nomepessa']
params[nomepessa]
params
continue
params
continue
params
continue
teste['ciclo_id']
teste[ciclo_id]
teste.first
teste.first.ciclo_id
teste.las
teste.second
teste.first
teste.each
teste.ciclo_id
teste
teste = params.map
params[nomepessoa]
params
params.ciclo_id
params["ciclo_id"]
params[:ciclo_id]
params[':ciclo_id']
params['ciclo_id']
params
params['ciclo_id']
params['nomepessoa']
params.map.nomepessoa
params.map.second
params.map.first
params.map
params.nomepessoa
params
params[:ciclo_id]
continue
params[:ciclo_id]
continue
params[:ciclo_id]
continue
Date.parse('01/01/2010')
Date.parse(data)
Data.parse(data)
data.strptime('12/31/2001', '%m/%d/%Y')
data
continue
params[:created_at]
data
continue
redeatual.blank?
redeatual = Rede.find_by_cadastro_id(user.cadastro.id)
continue
@doacao
continue
reentrando.flagativo
reentrando
continue
doacoes
continue
doacoes
continue
doacoes
continue
doacoes
continue
doacoes
continue
doacoes
continue
Doacao.where('tempo > ?', Time.now)
Doacao.where(:tempo > Time.now)
Time.now
exit
reentradas.count
exit
continue
doacaorecebida.count
doacaorealizada.count
reentradas.count
cadastro_id
continue
cadastro
exit
cadastro.save
cadastro
continue
reentrada.save
rede.save
financeiro.save
usuario.save(:validate => false)
usuario.save
cadastro.save
continue
user.cadastro
exit
continue
indicado.cadastro_2.id
continue
indicado.cadastro_2.id
continue
indicado.cadastro_2.id
indicado
continue
checksum(@usuario.cadastro_id)
exit
checksum(@usuario.cadastro_id)
continue
checksum(cadastro_id)
checksum
rede
dadosfinanceiros
cadastro
usuario
continue
usuario.save(:validate => false)
usuario.save
cadastro.save(:validate => false)
continue
usuario?
if usuario end
usuario.save
usuario?
if usuario
usuario
continue
cadastro.save(:validate => false)
continue
exit
Dadosfinanceiro.find_by_cadastro_id(52)
Dadosfinanceiro.find_by_cadastro_id(user.cadastro_id)
userfinan
userfinan.id
user.cadastro_id
user
exit
params[:cadastro_id]
continue
redes
continue
@doacao.id
continue
usuario.email
usuario
continue
doacoes
continue
params[:id]
@doacaoid[
continue
user.cadastro_id
continue
rede.blank?
rede.blank
rede
reentradas.blank?
reentradas.blank ?
reentradas.blank
reentradas
continue
reentrada.destroy
reentradas = Reentrada.where(:cadastro_adicionado_id => cadastro.id)
Reentrada.where(:cadastro_adicionado_id => cadastro.id)
