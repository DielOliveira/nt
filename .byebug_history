continue
@filho_primeiro.children.order("id desc").first
@filho_primeiro.children.sort_by(:id)
@filho_primeiro.children
@filho_primeiro.children.cadastro.id
@filho_primeiro.children.rede
@filho_primeiro.children.id
@filho_primeiro.children
@filho_primeiro.children.max(:id)
@filho_primeiro.children
continue
exit
teste
teste.id
teste
teste = Rede.where("linha = 6 and cadastro_id is null").minimum(:created_at)
Rede.where("linha = 6 and cadastro_id is null").minimum(:created_at)
exit
rede.cadastro_id
rede
rede = Rede.find_by_id(proximaentrada.to_i)
proximaentrada.to_i
proximaentrada
proximaentrada.to_i
cadastro.id
continue
cadastro.id
cadastro
continue
cadastro
cadastro.save
cadastro.id
continue
@rede.first.children.second
@rede.first.children.first
@rede.first.children
@rede
@rede.second
@rede.first.id
@rede.first
@rede.each
@rede.[:id]
@rede[:id]
@rede.rede
@rede
@rede.id
@rede.parent_id
@rede.children
@rede
continue
@rede.children
@rede
continue
@rede.sort_by
@rede.order_by()
@rede.order(:create_at).children.first
@rede.second
@rede.first
@rede
continue
@rede
continue
doacao.save
continue
cadastro.save
continue
@cadastro.flagativo
@cadastro.masculino
continue
doacaorecebida.count
doacaofeita.count
continue
doacoes.cadastro_recebedor.ciclo_id
doacoes.cadastro_recebedor_id.to_s
teste = Doacao.where('cadastro_recebedor_id = ' + doacoes.cadastro_recebedor_id.to_s + ' and ciclo_recebedor = ' + doacoes.cadastro_recebedor.ciclo_id.to_s)
teste
teste = Doacao.where('cadastro_recebedor_id = ' + doacoes.cadastro_recebedor_id.to_s + ' and ciclo_recebedor = ' + doacoes.cadastro_recebedor.ciclo_id.to_s + ' and dataconfirmacao is not null')
Doacao.where('cadastro_recebedor_id = ' + doacoes.cadastro_recebedor_id.to_s + ' and ciclo_recebedor = ' + doacoes.cadastro_recebedor.ciclo_id.to_s + ' and dataconfirmacao is not null')
doacaorecebida.first
doacaorecebida
continue
doacaorecebida.count
doacaofeita.count
continue
doacoes.cadastro_recebedor.ciclo.id
doacoes.cadastro_recebedor.nomepessoa
doacaorecebedia.count
doacaofeita.count
doacaofeita
continue
doacaorecebida.count
doacaorecebida
continue
doacaorecebida.first
doacaorecebida
doacaorecebida.count
doacaofeita
continue
cadastro.save
continue.save
cadastro
cadastro.save
cadastro
continue
cadastro.save
cadastro
continue
cadastro.save
cadastro.id
cadastro
continue
reentrada.cadastro_reentrando_id = 2
reentrando.cadastro.id
reentrada.cadastro_reentrando_id
reentrada.cadastro_reentrando
reentrada
continue
 reentrando.cadastro.id
reentrada.cadastro_reentrando_id = reentrando.cadastro.id
reentrada.cadastro_reentrando_id
reentrada.cadastro_reentrando_id = reentrando.cadastro.id
reentrando.cadastro.id
continue
proximaentrada
continue
proximaentrada
continue
@valor
continue
rede.cadastro.ciclo.id
rede.parent.parent.cadastro.id
rede.parent.parent.cadastro_id
rede.cadastro_id
rede
rede.cadastro_2_id
rede.linha
continue
rede
rede.rede
rede.linha
rede.cadastro_2.linha
rede.cadastro_2
rede
continue
redes.each do |rede|
redes
continue
reentrada
continue
start.save
start
continue
doacoes.empty?
doacaoes.empty?
doacoes = Doacao.joins('inner join ciclos cl on cl.id = ciclo_id').where("cadastro_1_id = " + user.cadastro.id.to_s + "and ciclo_id = " + user.cadastro.ciclo.numerociclo.to_s )
rede.linha
rede
continue
@redepermite
continue
cadastro.save
cadastro.cpfpadrinho = user.email
cadastro.save
cadastro
continue
cadastro.save
cadastro.sabe
cadastro
continue
params[:ciclo]
continue
@doacoes
continue
@doacoes
continue
@dadosfinanceiros
continue
@dadosfinanceiros
@doacaospendentespagar
doacaospendentespagar
continue
doacoes.empty?
doacoes
doacoes == nil
doacoes
continue
Usuario.find_by_email(self.cpfpadrinho)
continue
user.cadastro
user
exit
Rede.where("linha = 2 and cadastro_id is null").minimum(:id)
Rede.where("linha = 2 and cadastro_id is null").maximum("created_at")
Rede.where("linha = 2 and cadastro_id is null").maximum("created_at").first
Rede.where("linha = 2 and cadastro_id is null")
Rede.where("linha = 2 and cadastro_id is null").max(:created_at)
Rede.where("linha = 2 and cadastro_id is null").max("created_at")
Rede.where("linha = 2 and cadastro_id is null").max("created_at").first
Rede.where("linha = 2 and cadastro_id is null").max("created_at").first.id
continue
usuario.save
usuario.sabe
usuario
continue
@linha1.empty?
@linha1.empty
@linha1.blank
@linha1.nill
@linha1.nil
@linha1
continue
:cpftitular
params[:cpftitular]
continue
teste.save
teste
teste.save
teste.update
teste.save
teste
continue
 Doacao.find(@doacao.id).update_attributes(:flagconfirmada => true, :dataconfirmacao => Time.now)
@doacao.id
teste
continue
teste.save
teste
continue
@doacao
continue
@cadastro
continue
@cadastro
continue
user.cadastro.ciclo
user.cadastro
continue
user.cadastro.ciclo
user.cadastro
continue
@rede.parent
@rede.father
@rede.children
@rede.father
@rede
exit
userfinan
continue
userfinan
continue
@rede.children.first.cadastro.nomepessoa
@rede.children.first.cadastro
@rede.children.first
continue
@rede.children.second
@rede.children.first
