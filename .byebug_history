continue
@usuario
exit
continue
numeros.split(/,/)
numeros.split(,)
numeros = '2,2,2,2,2'
numeros.split
result
continue
dados.count
continue
dados.count
dados
exit
@html
continue
@html
continue
@html
continue
@html
continue
@html
exit
BuscaPessoas(dados_pessoas.id)
continue
BuscaPessoas(dados_pessoas.id)
continue
dados
continue
dados
continue
dados_pessoas.id
dados_pessoas
continue
@html
continue
if html == nil
html
continue
dados.count
html
exit
continue
exit
continue
result
@cont
continue
@cont
continue
result
@cont
continue
@cont
cont
continue
result
c
continue
array
continue
array
continue
array.join
array
continue
contapessoas(d.id)
continue
rede.children.count
continue
cadastro.save
continue
cadastro.save
rede.save
cadastro.save
@permite
continue
cadastro.ciclo.qtdreentradas
@reentradas
continue
upgrade(user.cadastro.id)
continue
reentrada(user.cadastro.id)
continue
reentradas
exit
cadastro.save
cadastro.id
exit
cadastro.save
cadastro.cpfpadrinho
reentrando.email
cadastro.save
cadastro.email
cadastro.save
continue
d
continue
d
continue
d
continue
d
continue
d
continue
d
continue
d
d.children
d.children.rede.id
d.children.id
d.children
d
d.children.id
continue
d
continue
@filho_primeiro.children.order("id desc").first
@filho_primeiro.children.sort_by(:id)
@filho_primeiro.children
@filho_primeiro.children.cadastro.id
@filho_primeiro.children.rede
@filho_primeiro.children.id
@filho_primeiro.children
@filho_primeiro.children.max(:id)
@filho_primeiro.children
continue
exit
teste
teste.id
teste
teste = Rede.where("linha = 6 and cadastro_id is null").minimum(:created_at)
Rede.where("linha = 6 and cadastro_id is null").minimum(:created_at)
exit
rede.cadastro_id
rede
rede = Rede.find_by_id(proximaentrada.to_i)
proximaentrada.to_i
proximaentrada
proximaentrada.to_i
cadastro.id
continue
cadastro.id
cadastro
continue
cadastro
cadastro.save
cadastro.id
continue
@rede.first.children.second
@rede.first.children.first
@rede.first.children
@rede
@rede.second
@rede.first.id
@rede.first
@rede.each
@rede.[:id]
@rede[:id]
@rede.rede
@rede
@rede.id
@rede.parent_id
@rede.children
@rede
continue
@rede.children
@rede
continue
@rede.sort_by
@rede.order_by()
@rede.order(:create_at).children.first
@rede.second
@rede.first
@rede
continue
@rede
continue
doacao.save
continue
cadastro.save
continue
@cadastro.flagativo
@cadastro.masculino
continue
doacaorecebida.count
doacaofeita.count
continue
doacoes.cadastro_recebedor.ciclo_id
doacoes.cadastro_recebedor_id.to_s
teste = Doacao.where('cadastro_recebedor_id = ' + doacoes.cadastro_recebedor_id.to_s + ' and ciclo_recebedor = ' + doacoes.cadastro_recebedor.ciclo_id.to_s)
teste
teste = Doacao.where('cadastro_recebedor_id = ' + doacoes.cadastro_recebedor_id.to_s + ' and ciclo_recebedor = ' + doacoes.cadastro_recebedor.ciclo_id.to_s + ' and dataconfirmacao is not null')
Doacao.where('cadastro_recebedor_id = ' + doacoes.cadastro_recebedor_id.to_s + ' and ciclo_recebedor = ' + doacoes.cadastro_recebedor.ciclo_id.to_s + ' and dataconfirmacao is not null')
doacaorecebida.first
doacaorecebida
continue
doacaorecebida.count
doacaofeita.count
continue
doacoes.cadastro_recebedor.ciclo.id
doacoes.cadastro_recebedor.nomepessoa
doacaorecebedia.count
doacaofeita.count
doacaofeita
continue
doacaorecebida.count
doacaorecebida
continue
doacaorecebida.first
doacaorecebida
doacaorecebida.count
doacaofeita
continue
cadastro.save
continue.save
cadastro
cadastro.save
cadastro
continue
cadastro.save
cadastro
continue
cadastro.save
cadastro.id
cadastro
continue
reentrada.cadastro_reentrando_id = 2
reentrando.cadastro.id
reentrada.cadastro_reentrando_id
reentrada.cadastro_reentrando
reentrada
continue
 reentrando.cadastro.id
reentrada.cadastro_reentrando_id = reentrando.cadastro.id
reentrada.cadastro_reentrando_id
reentrada.cadastro_reentrando_id = reentrando.cadastro.id
reentrando.cadastro.id
continue
proximaentrada
continue
proximaentrada
continue
@valor
continue
rede.cadastro.ciclo.id
rede.parent.parent.cadastro.id
rede.parent.parent.cadastro_id
rede.cadastro_id
rede
rede.cadastro_2_id
rede.linha
continue
